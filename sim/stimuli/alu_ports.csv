# ALU comprehensive test cases
# AI-generated: I didn't feel like writing this by hand.
# Do you really expect me to write all these test cases manually?
# Format: A,B,ALUControl,expected_ALUResult,expected_Zero
# ALUControl mapping:
#  0: ADD  (A + B)
#  1: SUB  (A - B)
#  2: MUL  (A * B)
#  3: AND  (A & B)
#  4: XOR  (A ^ B)
#  5: OR   (A | B)
#  6: NOR  (~(A | B))
#  7: NEG  (-A)
#  8: SLL  (A << B[4:0])
#  9: SRL  (A >> B[4:0])
# 10: SLA  (A <<< B[4:0])
# 11: SRA  (A >>> B[4:0])
# 12: ROL  (A rotated left by B[4:0])
# 13: ROR  (A rotated right by B[4:0])
# 14: SLT  (Set Less Than, signed)
# 15: SLTU (Set Less Than, unsigned)

# --- ADD ---
# 5 + 10 = 15
5,10,0,15,0
# 0 + 0 = 0 (Zero)
0,0,0,0,1
# -5 + 5 = 0 (Zero)
-5,5,0,0,1
# INT_MAX + 1 = INT_MIN (overflow)
2147483647,1,0,-2147483648,0
# -1 + -1 = -2
-1,-1,0,-2,0
# 100 + 200 = 300
100,200,0,300,0

# --- SUB ---
# 10 - 5 = 5
10,5,1,5,0
# 5 - 5 = 0 (Zero)
5,5,1,0,1
# 0 - 10 = -10
0,10,1,-10,0
# -5 - (-10) = 5
-5,-10,1,5,0
# INT_MAX - (-1) = INT_MIN (overflow)
2147483647,-1,1,-2147483648,0
# INT_MIN - 1 = INT_MAX (overflow)
-2147483648,1,1,2147483647,0

# --- MUL ---
# 5 * 3 = 15
5,3,2,15,0
# 0 * 100 = 0 (Zero)
0,100,2,0,1
# -5 * 3 = -15
-5,3,2,-15,0
# 2 * 2 = 4
2,2,2,4,0
# 65536 * 65536 = 0 (overflow, lower 32 bits)
65536,65536,2,0,1
# 123 * 456 = 56088
123,456,2,56088,0

# --- AND ---
# 0xFF & 0x0F = 0x0F
255,15,3,15,0
# 0x0 & 0xFFFFFFFF = 0x0 (Zero)
0,4294967295,3,0,1
# 0xFFFFFFFF & 0xFFFFFFFF = 0xFFFFFFFF
4294967295,4294967295,3,4294967295,0
# 0xAA & 0x55 = 0x00 (Zero)
170,85,3,0,1
# 0xF0 & 0x0F = 0x00 (Zero)
240,15,3,0,1
# 0xDEADBEEF & 0xF0F0F0F0 = 0xD0A0B0E0
3735928559,4042322160,3,3500191968,0

# --- XOR ---
# 0xFF ^ 0xFF = 0x00 (Zero)
255,255,4,0,1
# 0x0 ^ 0xFFFFFFFF = 0xFFFFFFFF
0,4294967295,4,4294967295,0
# 0xAA ^ 0x55 = 0xFF
170,85,4,255,0
# 0xFFFFFFFF ^ 0x0 = 0xFFFFFFFF
4294967295,0,4,4294967295,0
# 0xDEADBEEF ^ 0xF0F0F0F0 = 0x2E5D4E1F
3735928559,4042322160,4,777866783,0
# 0x55555555 ^ 0xAAAAAAAA = 0xFFFFFFFF
1431655765,2863311530,4,4294967295,0

# --- OR ---
# 0xF0 | 0x0F = 0xFF
240,15,5,255,0
# 0x0 | 0x0 = 0x0 (Zero)
0,0,5,0,1
# 0xAA | 0x55 = 0xFF
170,85,5,255,0
# 0xFFFFFFFF | 0x0 = 0xFFFFFFFF
4294967295,0,5,4294967295,0
# 0xDEADBEEF | 0xF0F0F0F0 = 0xFEFDFEFF
3735928559,4042322160,5,4278058751,0
# 0x0 | 0xFFFFFFFF = 0xFFFFFFFF
0,4294967295,5,4294967295,0

# --- NOR ---
# ~(0x0 | 0x0) = 0xFFFFFFFF
0,0,6,4294967295,0
# ~(0xFFFFFFFF | 0xFFFFFFFF) = 0x0 (Zero)
4294967295,0,6,0,1
# ~0x1 = 0xFFFFFFFE
1,0,6,4294967294,0
# ~0x7FFFFFFF = 0x80000000
2147483647,0,6,2147483648,0
# ~0x80000000 = 0x7FFFFFFF
2147483648,0,6,2147483647,0
# ~0xAA = 0xFFFFFF55
170,0,6,4294967125,0

# --- NEG ---
# -0x0 = 0x0 (Zero)
0,0,7,0,1
# -0x1 = 0xFFFFFFFF
1,0,7,4294967295,0
# -0xFFFFFFFF = 0x1
4294967295,0,7,1,0
# -0x7FFFFFFF = 0x80000001
2147483647,0,7,2147483649,0
# -0x80000000 = 0x80000000
2147483648,0,7,2147483648,0
# -0x64 = 0xFFFFFF9C
100,0,7,4294967196,0

# --- SLL (Logical shift left) ---
# 0x1 << 1 = 0x2
1,1,8,2,0
# 0x1 << 31 = 0x80000000
1,31,8,2147483648,0
# 0x4 << 2 = 0x10
4,2,8,16,0
# 0xFFFFFFFF << 1 = 0xFFFFFFFE
4294967295,1,8,4294967294,0
# 0x1 << 0 = 0x1
1,0,8,1,0
# 0x7FFFFFFF << 1 = 0xFFFFFFFE
2147483647,1,8,4294967294,0

# --- SRL (Logical shift right) ---
# 0x2 >> 1 = 0x1
2,1,9,1,0
# 0x4 >> 2 = 0x1
4,2,9,1,0
# 0x80000000 >> 31 = 0x1
2147483648,31,9,1,0
# 0xFFFFFFFF >> 1 = 0x7FFFFFFF
4294967295,1,9,2147483647,0
# 0x1 >> 1 = 0x0 (Zero)
1,1,9,0,1
# 0x10 >> 4 = 0x1
16,4,9,1,0

# --- SLA (Arithmetic shift left, same as logical) ---
# 0x1 <<< 1 = 0x2
1,1,10,2,0
# 0x1 <<< 31 = 0x80000000
1,31,10,2147483648,0
# 0x4 <<< 2 = 0x10
4,2,10,16,0
# 0xFFFFFFFF <<< 1 = 0xFFFFFFFE
4294967295,1,10,4294967294,0
# 0x1 <<< 0 = 0x1
1,0,10,1,0
# 0x7FFFFFFF <<< 1 = 0xFFFFFFFE
2147483647,1,10,4294967294,0

# --- SRA (Arithmetic shift right) ---
# 0x2 >>> 1 = 0x1
2,1,11,1,0
# 0x4 >>> 2 = 0x1
4,2,11,1,0
# 0x80000000 >>> 1 = 0x40000000
2147483648,1,11,1073741824,0
# 0xFFFFFFFF >>> 1 = 0x7FFFFFFF
4294967295,1,11,2147483647,0
# 0x80000000 >>> 31 = 0x1
2147483648,31,11,1,0
# 0x1 >>> 1 = 0x0 (Zero)
1,1,11,0,1

# --- ROL (Rotate left) ---
# ROL(0x1,1) = 0x2
1,1,12,2,0
# ROL(0x80000000,1) = 0x1
2147483648,1,12,1,0
# ROL(0xFFFFFFFF,1) = 0xFFFFFFFF
4294967295,1,12,4294967295,0
# ROL(0xF0,4) = 0xF00
240,4,12,3840,0
# ROL(0x1,31) = 0x80000000
1,31,12,2147483648,0
# ROL(0xAA,8) = 0xAA00
170,8,12,43520,0

# --- ROR (Rotate right) ---
# ROR(0x2,1) = 0x1
2,1,13,1,0
# ROR(0x1,1) = 0x80000000
1,1,13,2147483648,0
# ROR(0xFFFFFFFF,1) = 0xFFFFFFFF
4294967295,1,13,4294967295,0
# ROR(0xF00,4) = 0xF0
3840,4,13,240,0
# ROR(0x80000000,31) = 0x1
2147483648,31,13,1,0
# ROR(0xAA00,8) = 0xAA
43520,8,13,170,0

# --- SLT (Set Less Than, signed) ---
# 1 < 2 = 1
1,2,14,1,0
# 2 < 1 = 0
2,1,14,0,1
# -1 < 0 = 1
-1,0,14,1,0
# 0 < -1 = 0
0,-1,14,0,1
# -5 < -2 = 1
-5,-2,14,1,0
# 100 < 100 = 0
100,100,14,0,1
# INT_MIN < INT_MAX = 1
-2147483648,2147483647,14,1,0
# INT_MAX < INT_MIN = 0
2147483647,-2147483648,14,0,1

# --- SLTU (Set Less Than Unsigned) ---
# 1 < 2 = 1
1,2,15,1,0
# 2 < 1 = 0
2,1,15,0,1
# 0xFFFFFFFF < 0 = 0
4294967295,0,15,0,1
# 0 < 0xFFFFFFFF = 1
0,4294967295,15,1,0
# 0x80000000 < 0x7FFFFFFF = 0
2147483648,2147483647,15,0,1
# 0x7FFFFFFF < 0x80000000 = 1
2147483647,2147483648,15,1,0
# 100 < 100 = 0
100,100,15,0,1
# 0 < 0 = 0
0,0,15,0,1

# --- Edge cases ---
# 0xFFFFFFFF + 0xFFFFFFFF = 0xFFFFFFFE
4294967295,4294967295,0,4294967294,0
# 0x80000000 - 0x80000000 = 0x0 (Zero)
2147483648,2147483648,1,0,1
# 0x8000 * 0x2 = 0x10000
32768,2,2,65536,0
# 0xFFFF0000 & 0xFFFF = 0x0 (Zero)
4294901760,65535,3,0,1
# 0x55555555 ^ 0x55555555 = 0x0 (Zero)
1431655765,1431655765,4,0,1
# 0xAAAAAAAA | 0x55555555 = 0xFFFFFFFF
2863311530,1431655765,5,4294967295,0
