// Comprehensive test program for MIPS single-cycle processor
// Tests all instructions in the ISA

// Register initialization with test patterns
20100055  // addi $s0, $zero, 0x55    (load 0x55 into $s0)
201100AA  // addi $s1, $zero, 0xAA    (load 0xAA into $s1)

// Test basic arithmetic
20080001  // addi $t0, $zero, 1       (load 1 into $t0)
2009000F  // addi $t1, $zero, 15      (load 15 into $t1)
01094820  // add  $t1, $t0, $t1       ($t1 = $t0 + $t1 = 16)
01285022  // sub  $t2, $t1, $t0       ($t2 = $t1 - $t0 = 15)

// Test logical operations
02115824  // and  $t3, $s0, $s1       ($t3 = $s0 & $s1 = 0x00)
02116025  // or   $t4, $s0, $s1       ($t4 = $s0 | $s1 = 0xFF)
02116826  // xor  $t5, $s0, $s1       ($t5 = $s0 ^ $s1 = 0xFF)

// Test multiplication
01094018  // mul  $t0, $t0, $t1       ($t0 = $t0 * $t1 = 16)

// Test immediate shift operations
00087040  // sll  $t6, $t0, 1         ($t6 = $t0 << 1 = 32)
000970C2  // srl  $t7, $t1, 3         ($t7 = $t1 >> 3 = 2)
00085043  // sra  $t2, $t0, 1         ($t2 = $t0 >> 1 = 8)

// Test rotate operations
0008C1C0  // rol  $t8, $t0, 7         ($t8 = rotate_left($t0, 7))
0008C91D  // ror  $t9, $t0, 4         ($t9 = rotate_right($t0, 4))

// Test variable shift operations
21290003  // addi $t1, $t1, 3         (set $t1 = 19 for shift amount)
01287004  // sllv $t6, $t0, $t1       ($t6 = $t0 << $t1[4:0] = 0x8000)
01287806  // srlv $t7, $t0, $t1       ($t7 = $t0 >> $t1[4:0] = 0)
01285007  // srav $t2, $t0, $t1       ($t2 = $t0 >> $t1[4:0] = 0)

// Test variable rotate operations
0128C01E  // rolv $t8, $t0, $t1       ($t8 = rotate_left($t0, $t1))
0128C81F  // rorv $t9, $t0, $t1       ($t9 = rotate_right($t0, $t1))

// Test memory operations
AC080020  // sw   $t0, 0x20($zero)    (store $t0 to memory address 0x20)
8C0C0020  // lw   $t4, 0x20($zero)    (load from memory address 0x20 into $t4)

// Test control flow - branch
200D0010  // addi $t5, $zero, 16      (set $t5 = 16 for comparison)
110D0002  // beq  $t0, $t5, 2         (branch if $t0 equals $t5)
2008FFFF  // addi $t0, $zero, -1      (skipped if branch taken)
200EFFFF  // addi $t6, $zero, -1      (skipped if branch taken)

// Test jump instruction
08000000  // j 0x000000               (jump to beginning of program)